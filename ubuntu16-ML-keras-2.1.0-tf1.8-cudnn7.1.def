#
# Ubuntu ML container
#

BootStrap: docker
From: nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04
IncludeCmd: false

%labels

Maintainer J.Simone
Date: 2017-10-27
cuda_driver unspecified

%help

A portable Ubuntu 16.04 environment with pre-built machine learning frameworks including caffe, tensorflow, and keras.

%environment
    # set these environment variables
    export CUDA_ROOT=/usr/local/cuda
    export CUDA_HOME=/usr/local/cuda
    export PATH=$PATH:$CUDA_ROOT/bin
    export LD_LIBRARY_PATH=$CUDA_ROOT/lib64

%runscript
    # Check the current environment
    chk_nvidia_uvm=$(grep nvidia_uvm /proc/modules)
    if [ -z "$chk_nvidia_uvm" ]; then
        echo "Problem detected on the host: the Linux kernel module nvidia_uvm is not loaded"
    fi
    exec /bin/bash

%setup
    # Runs from outside the container during Bootstrap
    workdir=$(pwd)

%post
    # Runs within the container during Bootstrap

    # make lqcd filesystem mount points
    mkdir /scratch /data /project /lqcdproj

    # Set up some required environment defaults
    export LC_ALL=C
    export CUDA_HOME=/usr/local/cuda
    export CUDA_ROOT=/usr/local/cuda
    export PATH=/bin:/sbin:/usr/bin:/usr/sbin:${CUDA_HOME}/bin:$PATH
    export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64

    # Install the necessary packages (from repo)
    apt-get update && apt-get install -y --no-install-recommends \
    	autoconf \
	automake \
        bc \
	cmake \
        curl \
	g++ \
	gfortran \
        git \
	libatlas-base-dev \
	libatlas3-base \
	libblas-dev \
	libboost-all-dev \
	libcupti-dev \
	libcurl4-openssl-dev \
	libffi-dev \
        libfreetype6-dev \
	libgflags-dev \
	libgoogle-glog-dev \
        libgraphviz-dev \
	libhdf5-serial-dev \
	libibverbs-dev \
	libjpeg-dev \
	libleveldb-dev \
	liblcms2-dev \
	liblapack-dev \
	liblapacke-dev \
	liblmdb-dev \
        libopenblas-dev \
	libopenmpi-dev \
	libopencv-dev \
	libprotobuf-dev \
        libpng-dev \
	libsnappy-dev \
	libssl-dev \
	libxml2-dev \
	libtiff5-dev \
	libwebp-dev \
        libzmq3-dev \
        pkg-config \
	protobuf-compiler \
        python-dev \
        python-pip \
        python-pydot \
	python-setuptools \
	python-tk \
        rsync \
        software-properties-common \
	time \
        unzip \
	vim \
	zip \
	wget \
        zlib1g-dev
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

    # libgpuarray with python binding
    #git clone https://github.com/Theano/libgpuarray.git
    #sdir=`pwd`
    #cd libgpuarray && \
    #mkdir Build && \
    #cd Build && \
    #cmake .. -DCMAKE_BUILD_TYPE=Release && \
    #make && \
    #make install && \
    #cd .. && \
    #python2.7 setup.py install && \
    #cd $sdir && \
    #rm -rf libgpuarray
    #/sbin/ldconfig

    # Update to the latest pip (newer than repo)
    pip install --no-cache-dir --upgrade pip==9.0.3
    pip install -U setuptools
    # Install other needed packages
    pip install --no-cache-dir --upgrade \
        chardet \
    	Cheetah \
	Cython \
	deepdish \
        future \
	h5py \
	ipykernel \
	jupyter \
	leveldb \
	lmdb \
	Mako \
        matplotlib \
	ndg-httpsclient \
	nose \
	numpy \
	pandas \
	path.py \
	Pillow \
	pyasn1 \
	pygments \
	pyopenssl \
	python-dateutil \
	python-gflags \
	pyyaml \
	requests \
        scipy \
	scikit-image \
        scikit-learn \
	six \
	sqlalchemy \
	sympy \
	urllib3 \
	virtualenv \
	wheel \
	zmq

    # libgpuarray with python binding
    git clone https://github.com/Theano/libgpuarray.git
    sdir=`pwd`
    cd libgpuarray && \
    mkdir Build && \
    cd Build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make && \
    make install && \
    cd .. && \
    python2.7 setup.py install && \
    cd $sdir && \
    rm -rf libgpuarray
    /sbin/ldconfig


    # pyCUDA
    ( cd /tmp && \
      wget https://pypi.python.org/packages/b3/30/9e1c0a4c10e90b4c59ca7aa3c518e96f37aabcac73ffe6b5d9658f6ef843/pycuda-2017.1.1.tar.gz#md5=9e509f53a23e062b31049eb8220b2e3d && \
      tar xf pycuda-2017.1.1.tar.gz && \
      cd pycuda-2017.1.1 && \
      python configure.py --cuda-root=${CUDA_HOME} --cudadrv-lib-dir=${NV_DRIVER_ROOT} && \
      make install \
    )

    # TensorFlow package versions as listed here:
    #   https://www.tensorflow.org/get_started/os_setup#test_the_tensorflow_installation
    #
    # Ubuntu/Linux 64-bit, GPU enabled, Python 2.7 (tf1.3 requires CUDA toolkit 8.0 and CuDNN v6)
    # https://www.tensorflow.org/install/install_linux#the_url_of_the_tensorflow_python_package
    export NUMPY1133=https://pypi.python.org/packages/eb/be/737f3df5806192ac4096e549e48c8c76cfaa2fb880a1c62a7bb085adaa9b/numpy-1.13.3-cp27-cp27mu-manylinux1_x86_64.whl
    pip install --no-cache-dir --ignore-installed --upgrade $NUMPY1133
    export TF_BINARY_URL=https://files.pythonhosted.org/packages/9d/77/fff8c99f9a54823b95f3160b110c96c0c6d6b299e8df51a17dbc488455d8/tensorflow_gpu-1.8.0-cp27-cp27mu-manylinux1_x86_64.whl

    pip install --no-cache-dir --ignore-installed --upgrade $TF_BINARY_URL

    # Caffe master branch
    #
    ( mkdir -p /usr/local/caffe/source && \
      git clone -b master --depth 1 https://github.com/BVLC/caffe.git /usr/local/caffe/source && \
      cd /usr/local/caffe/source && \
      cat python/requirements.txt | xargs -n1 pip install && \
      mkdir build && cd build && \
      git clone https://github.com/NVIDIA/nccl.git && cd nccl && make -j install && cd .. && rm -rf nccl && \
      cmake -DCMAKE_INSTALL_PREFIX=/usr/local/caffe -DUSE_CUDNN=1 -DUSE_NCCL=1 -DCUDA_ARCH_NAME="Manual" -DCUDA_ARCH_BIN="30 35 50 60 61" .. && \
      make all && \
      make install \
    )

    # keras and Lasagne

    pip --no-cache-dir install keras
    pip --no-cache-dir install -r https://raw.githubusercontent.com/Lasagne/Lasagne/master/requirements.txt
    pip --no-cache-dir install https://github.com/Lasagne/Lasagne/archive/master.zip

    # Theano 0.8 is req for Lasagne; Theano development ending at v1
    # Install Theano 0.9 and set up Theano config (.theanorc) OpenBLAS
    #pip --no-cache-dir install Theano && \
    #	\
    #	echo "[global]\ndevice=gpu\nfloatX=float32\nmode=FAST_RUN \
    #	     	\n\n[gpuarray]\npreallocate=0.95 \
    #		\n\n[nvcc]\nfastmath=True \
    #		\n\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
    #		\n" \
    #	> /etc/theanorc


    /sbin/ldconfig

%test
    # Sanity check that the container is operating
    #
    # nosetests /usr/local/caffe/source/python
    # nosetests 
